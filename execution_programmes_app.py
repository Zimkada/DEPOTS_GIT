# -*- coding: utf-8 -*-
"""
Created on Tue Feb 27 10:34:42 2024

@author: ok
"""
import streamlit as st
import pandas as pd

# D√©finir la couleur de fond de la page
st.set_page_config(page_title="Ex√©cution programmes", page_icon="üìä", layout="wide", initial_sidebar_state="expanded")

# D√©finir les taux pr√©vus par mois
taux_prevus_par_mois = {
    'Septembre': 10.00,
    'Octobre': 25.00,
    'Novembre': 35.00,
    'D√©cembre': 40.00,
    'Janvier': 60.00,
    'F√©vrier': 75.00,
    'Mars': 90.00,
    'Avril': 100.00,
    'Juin': 100.00
}

def renseigner_taux_execution():
    st.header(':rainbow[EX√âCUTION DES PROGRAMMES SCOLAIRES]:books:', anchor='CENTER')
    st.subheader(':orange[Application web d√©velopp√©e par : Chabi Zim√© GOUNOU N\'GOBI, Planificateur de l\'√©ducation, DataScientist]:computer:')

    st.subheader(':orange[1. Informations g√©n√©rales]')

    # Liste des communes
    communes = ['Banikoara', 'Gogounou', 'Kandi', 'Karimama', 'Malanville', 'S√©gbana']
    commune_selected = st.selectbox(':orange[S√©lectionnez la commune :]', communes, key="commune_select")

    # Nom du coll√®ge
    list_colleges = choix_college(commune_selected)
    college_name = st.selectbox(':orange[S√©lectionnez votre coll√®ge :]', list_colleges, key="college_select")

    # Cycle d'enseignement
    cycle_enseignement = st.radio(":orange[Cycle d'enseignement :]", ('1er cycle', '1er et 2nd cycles'))

    st.subheader(':orange[2. Taux d\'ex√©cution]')

    # Option de choix du mois
    mois_selected = st.selectbox("S√©lectionnez le mois :", list(taux_prevus_par_mois.keys()), key="mois_select")

    # D√©terminer les promotions en fonction du cycle d'enseignement
    if cycle_enseignement == '1er cycle':
        promotions = ['6i√®me', '5i√®me', '4i√®me', '3i√®me']
    else:
        promotions = ['6i√®me', '5i√®me', '4i√®me', '3i√®me', '2nd', '1√®re', 'Tle']

    # D√©terminer le taux pr√©vu en fonction du mois s√©lectionn√©
    taux_prevu = taux_prevus_par_mois.get(mois_selected)

    # Cr√©er une section pour chaque discipline
    disciplines = ['Fran√ßais', 'Anglais', 'Histoire-G√©ographie', 'Allemand', 'Espagnol', 'Philo', 'Math√©matiques', 'PCT', 'SVT','EPS', '√âconomie']

    # DataFrame pour stocker les donn√©es du coll√®ge actuel
    college_df = pd.DataFrame(columns=['Commune', 'Nom du coll√®ge', 'Discipline', 'Promotion', 'Taux pr√©vu (%)', 'Taux minimum (%)', 'Taux maximum (%)'])

    # Boucle sur les disciplines
    for discipline in disciplines:
        st.subheader(f':orange[{discipline}]:book:')

        # Diviser en 4 colonnes
        col1, col2, col3, col4 = st.columns(4)

        # Cr√©ation des listes pour stocker les taux d'ex√©cution min et max par promotion
        taux_min = {}
        taux_max = {}

        # Boucle sur les promotions
        for promotion in promotions:
            with col1:
                st.write(":orange[Taux pr√©vu (%)]")
                st.write(taux_prevu)

            with col2:
                taux_min[promotion] = st.number_input(f":orange[Taux minimum (%) {promotion}]", min_value=0.0, max_value=100.0, step=0.5, key=f"min_{discipline}_{promotion}")

            with col3:
                taux_max[promotion] = st.number_input(f":orange[Taux maximum (%) {promotion}]", min_value=0.0, max_value=100.0, step=0.5, key=f"max_{discipline}_{promotion}")

            # D√©terminer l'appr√©ciation
            appreciation = "Bonne progression" if taux_min[promotion] >= taux_prevu else "Retard"
            with col4:
                st.write(":orange[Appr√©ciation]")
                if appreciation == "Bonne progression":
                    st.write(appreciation, ":heavy_check_mark:")
                else:
                    st.write(appreciation, ":x:")

        # Cr√©ation du DataFrame pour la discipline en cours
        df = pd.DataFrame({
            'Commune': [commune_selected] * len(taux_min),
            'Nom du coll√®ge': [college_name] * len(taux_min),
            'Discipline': [discipline] * len(taux_min),
            'Promotion': list(taux_min.keys()),
            'Taux pr√©vu (%)': [taux_prevu] * len(taux_min),
            'Taux minimum (%)': list(taux_min.values()),
            'Taux maximum (%)': list(taux_max.values()),
            'Mois': [mois_selected] * len(taux_min)  # Ajout de la colonne 'Mois'
        })

        # Concat√©nation du DataFrame de la discipline en cours avec le DataFrame global
        college_df = df if college_df.empty else pd.concat([college_df, df], ignore_index=True)

    # Affichage du DataFrame global
    st.write("Taux d'ex√©cution r√©alis√© par promotion :")
    st.write(college_df)

    if st.button("Valider mes donn√©es"):
        # R√©cup√©rer les donn√©es stock√©es dans st.session_state
        global_df = st.session_state.get('global_df', pd.DataFrame(columns=['Commune', 'Nom du coll√®ge', 'Discipline', 'Promotion', 'Taux pr√©vu', 'Taux d\'ex√©cution minimum (%)', 'Taux d\'ex√©cution maximum (%)', 'Mois']))
        # Ajouter les donn√©es valid√©es au DataFrame global
        global_df = pd.concat([global_df, college_df], ignore_index=True)
        st.session_state['global_df'] = global_df  # Mettre √† jour les donn√©es dans st.session_state
        st.success("Donn√©es valid√©es avec succ√®s !")

def modifier_taux_execution():
    st.header(':rainbow[EX√âCUTION DES PROGRAMMES SCOLAIRES]:books:', anchor='CENTER')
    st.header(':orange[Modifier mes taux d\'ex√©cution]:hammer_and_wrench:')

    global_df = st.session_state.get('global_df', pd.DataFrame(columns=['Commune', 'Nom du coll√®ge', 'Discipline', 'Promotion', 'Taux pr√©vu', 'Taux d\'ex√©cution minimum (%)', 'Taux d\'ex√©cution maximum (%)', 'Mois']))

    # Liste des communes
    communes = ['Banikoara', 'Gogounou', 'Kandi', 'Karimama', 'Malanville', 'S√©gbana']
    selected_commune = st.selectbox(":orange[S√©lectionnez la commune :]", communes)

    # Liste des coll√®ges en fonction de la commune s√©lectionn√©e
    colleges = choix_college(selected_commune)
    selected_college = st.selectbox(":orange[S√©lectionner un coll√®ge :]", colleges)

    # Option de choix du mois pour filtrer les donn√©es
    mois_selected = st.selectbox(":orange[S√©lectionnez le mois :]", list(taux_prevus_par_mois.keys()), key="mois_select")

    # Filtrer les donn√©es en fonction de la commune, du coll√®ge s√©lectionn√© et du mois s√©lectionn√©
    filtered_data = global_df[(global_df['Commune'] == selected_commune) & (global_df['Nom du coll√®ge'] == selected_college) & (global_df['Mois'] == mois_selected)]

    # Si aucune donn√©e n'a √©t√© saisie pour ce coll√®ge et ce mois
    if filtered_data.empty:
        st.warning(f"Aucune donn√©e √† modifier pour le coll√®ge {selected_college} pour le mois de {mois_selected}. Veuillez renseigner d'abord ces donn√©es au menu 'Renseigner les donn√©es'.")

    else:
        # Afficher les donn√©es √† modifier
        st.write("Donn√©es √† modifier :")
        st.write(filtered_data)

        # Modifier les taux d'ex√©cution minimum et maximum
        for discipline in filtered_data['Discipline'].unique():
            st.subheader(discipline)

            # Diviser en 4 colonnes
            col1, col2, col3, col4 = st.columns(4)

            discipline_data = filtered_data[filtered_data['Discipline'] == discipline]
            for index, row in discipline_data.iterrows():
                key_min = f"new_min_{row['Discipline']}_{row['Promotion']}"
                key_max = f"new_max_{row['Discipline']}_{row['Promotion']}"
                new_min_value = st.number_input(f"Nouveau taux minimum (%) pour {row['Promotion']}", min_value=0.0, max_value=100.0, step=0.5, value=row['Taux d\'ex√©cution minimum (%)'], key=key_min)
                new_max_value = st.number_input(f"Nouveau taux maximum (%) pour {row['Promotion']}", min_value=0.0, max_value=100.0, step=0.5, value=row['Taux d\'ex√©cution maximum (%)'], key=key_max)

                # Mise √† jour des donn√©es modifi√©es
                filtered_data.at[index, 'Taux minimum (%)'] = new_min_value
                filtered_data.at[index, 'Taux maximum (%)'] = new_max_value

        if st.button("Valider la modification de mes donn√©es"):
            # Mettre √† jour les donn√©es modifi√©es dans le DataFrame global
            global_df.update(filtered_data)
            st.session_state['global_df'] = global_df  # Mettre √† jour les donn√©es dans st.session_state
            st.success("Donn√©es modifi√©es avec succ√®s !")

def visualiser_taux_execution():
    st.header(':rainbow[EX√âCUTION DES PROGRAMMES SCOLAIRES]:books:', anchor='CENTER')
    st.header(':orange[Visualiser mes taux d\'ex√©cution]:eye::mag:')

    global_df = st.session_state.get('global_df', pd.DataFrame(columns=['Commune', 'Nom du coll√®ge', 'Discipline', 'Promotion', 'Taux pr√©vu', 'Taux minimum (%)', 'Taux maximum (%)', 'Mois']))

    # Liste des communes
    communes = ['Banikoara', 'Gogounou', 'Kandi', 'Karimama', 'Malanville', 'S√©gbana']
    selected_commune = st.selectbox(":orange[S√©lectionnez la commune :]", communes)

    # Liste des coll√®ges en fonction de la commune s√©lectionn√©e
    colleges = choix_college(selected_commune)
    selected_college = st.selectbox(":orange[S√©lectionner un coll√®ge :]", colleges)

    # Option de choix du mois pour filtrer les donn√©es
    mois_selected = st.selectbox(":orange[S√©lectionnez le mois :]", list(taux_prevus_par_mois.keys()), key="mois_select")

    # Filtrer les donn√©es en fonction de la commune, du coll√®ge s√©lectionn√© et du mois s√©lectionn√©
    filtered_data = global_df[(global_df['Commune'] == selected_commune) & (global_df['Nom du coll√®ge'] == selected_college) & (global_df['Mois'] == mois_selected)]

    # Filtrer les donn√©es valid√©es
    validated_data = filtered_data.dropna()

    # Afficher les donn√©es
    st.write(validated_data)

def choix_college(commune_selected):
    list_colleges = []
    if commune_selected == 'Banikoara':
        list_colleges = ['CEG Arbonga', 'CEG Banikoara', 'CEG Founougo', 'CEG Gakounrou', 'CEG Gbassa', 'Gomparou', 
                         'CEG Goumori', 'CEG Kokey', 'CEG Kokiborou', 'CEG Ounet', 'CEG Somp√©r√©kou', 'CEG Soroko', 'CEG Toura']
    elif commune_selected == 'Gogounou':
        list_colleges = ['CEG Bagou', 'CEG Gogounou', 'CEG Gounarou', 'CEG Sori', 'CEG Wara', 'CEG Zougou P.']
    elif commune_selected == 'Kandi':
        list_colleges = ['CEG 1 Kandi', 'CEG 2 Kandi', 'CEG 3 Kandi', 'CEG Angarad√©bou', 'CEG Bens√©kou', 'Donwari', 
                         'CEG Kassakou', 'CEG Madina', 'CEG P√®d√®', 'CEG Sam', 'CEG Sonsoro', 'CEG Tissarou']
    elif commune_selected == 'Karimama':
        list_colleges = ['CEG Birni lafia', 'CEG Karimama', 'CEG Kompa']
    elif commune_selected == 'Malanville':
        list_colleges = ['CEG Garou', 'CEG Gu√©n√©', 'CEG Mad√©cali', 'CEG Malanville', 'CEG Toumboutou', 'CEG Wollo']
    elif commune_selected == 'S√©gbana':
        list_colleges = ['CEG libant√®', 'CEG liboussou', 'CEG lougou', 'CEG Piami', 'CEG S√©gbana', 'CEG Sokotindji']
    else:
        print('S√©lectionnez votre commune!')
    return list_colleges

def main():
    # Ajouter une balise HTML <style> pour changer la couleur de fond
    st.markdown(
    """
    <style>
    body {
        background-color: orange;
    }
    </style>
    """,
    unsafe_allow_html=True
)
    

    
    
    st.sidebar.title('MENUS')
    page = st.sidebar.radio("Aller √†", ('Renseigner les taux d\'ex√©cution', 'Modifier mes taux d\'ex√©cution', 'Visualiser mes taux d\'ex√©cution'))

    if page == 'Renseigner les taux d\'ex√©cution':
        renseigner_taux_execution()
    elif page == 'Modifier mes taux d\'ex√©cution':
        modifier_taux_execution()
    elif page == 'Visualiser mes taux d\'ex√©cution':
        visualiser_taux_execution()

if __name__ == "__main__":
    main()
















    

















